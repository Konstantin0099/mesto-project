// Токен: 506ae529-0bc2-4a43-a253-986c9dc5ffe6
// Идентификатор группы: plus-cohort-3

// Адрес сервера проекта Mesto: https://mesto.nomoreparties.co

// 3. Загрузка информации о пользователе с сервера ..где cohortId номер группы
// GET https://nomoreparties.co/v1/cohortId/users/me 
// {    // вернется такой объект 
//     "name": "Jacques Cousteau",
//     "about": "Sailor, researcher",
//     "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg",
//     "_id": "e20537ed11237f86bbb20ccb",
//     "cohort": "cohort0"
//   } 

// src="<%=require('./../src/image/foto_kusto.png')%>"

// 4. Загрузка карточек с сервера
// GET https://nomoreparties.co/v1/cohortId/cards 
// [  // В ответ придёт JSON с массивом карточек, которые загрузили студенты вашей группы:
// У каждой карточки есть свойства name и link — это заголовок и ссылка на картинку — они понадобятся при отображении каждой отдельной карточки.
// Как видите, у карточки также есть идентификатор — свойство _id.
//     {
//       "likes": [],
//       "_id": "5d1f0611d321eb4bdcd707dd",
//       "name": "Байкал",
//       "link": "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg",
//       "owner": {
//         "name": "Jacques Cousteau",
//         "about": "Sailor, researcher",
//         "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg",
//         "_id": "ef5f7423f7f5e22bef4ad607",
//         "cohort": "local"
//       },
//       "createdAt": "2019-07-05T08:10:57.741Z"
//     },
//     {
//       "likes": [],
//       "_id": "5d1f064ed321eb4bdcd707de",
//       "name": "Архыз",
//       "link": "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg",
//       "owner": {
//         "name": "Jacques Cousteau",
//         "about": "Sailor, researcher",
//         "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg",
//         "_id": "ef5f7423f7f5e22bef4ad607",
//         "cohort": "local"
//       },
//       "createdAt": "2019-07-05T08:11:58.324Z"
//     }
//   ] 

// return fetch('https://nomoreparties.co/v1/plus-cohort-3/users/me', {
//   headers: {
//     authorization: '506ae529-0bc2-4a43-a253-986c9dc5ffe6'
//   }
// })
//   .then(res => res.json())
//   .then((result) => {
//     console.log(result);
//   }); 


// Яндекс
// Практикум
// Сразу к главному. Проектные работы на месяц
// 4/4
// Интро
// Валидация форм в проекте Mesto. Инфраструктура проекта
// Взаимодействие с сервером в проекте Mesto. Связь с большим миром
// Проект Mesto выходит в свет. Выкладываем сайт на сервер

// Взаимодействие с сервером в проекте Mesto. Связь с большим миром
// В этом месяце вы продолжите добавлять в проект Mesto функциональность на JavaScript. Пишите код в уже созданном репозитории: только так проект можно отправить на проверку. А ещё по истории коммитов будет видно, что вы — единственный автор проекта.
// Не забудьте запушить готовую работу к себе в GitHub. Репозиторий тот же — ″mesto-project″. Отправить работу на проверку можно, как и в предыдущие разы: в курсе «Сдача проектной работы» перейдите в интерфейс сдачи проектной работы.
// 0. Что предстоит в этой проектной работе
// В последней проектной работе месяца вы подключите проект Mesto к серверу. А в следующем уроке — выложите его на сервер.
// image
// В этом месяце проект оживёт
// 1. Перед стартом. Необходимая информация
// Для выполнения этого задания вам понадобится дополнительная информация — личный токен и идентификатор вашей группы:
// c56e30dc-2883-4270-a59e-b2f7bae969c6 — так выглядит токен
// cohort-42 — а так — идентификатор группы 
// Вы получите их в личных сообщениях в Slack. Если по какой-то причине вы не получили эти данные, напишите куратору.
// Токен нужен для того, чтобы сервер умел различать пользователей. Он принадлежит только вам, не делитесь им с другими студентами.
// При авторизации на каком-нибудь сайте, например в социальной сети, обычно вводят логин и пароль. Эти логин и пароль отправляются на сервер, а сервер взамен присылает уникальный токен. Когда вы делаете новые запросы к серверу, они должны содержать этот токен, чтобы сервер понял, что запросы исходят от вас.
// Вы получили этот токен сразу. Мы пропустили шаг с обменом логина и пароля на токен. Иначе весь месяц пришлось бы потратить только на его реализацию. Но через несколько месяцев вы научитесь обменивать логин и пароль на токен за 30 строк кода.
// 2. Перед стартом. Как сделать запрос к серверу
// Адрес сервера проекта Mesto: https://mesto.nomoreparties.co.
// При каждом запросе нужно передавать токен и идентификатор группы. Вот пример запроса одного студента из группы с идентификатором cohort-42:
// return fetch('https://nomoreparties.co/v1/cohort-42/cards', {
//   headers: {
//     authorization: 'c56e30dc-2883-4270-a59e-b2f7bae969c6'
//   }
// })
//   .then(res => res.json())
//   .then((result) => {
//     console.log(result);
//   }); 
// Обратите внимание, что при запросе нужно передавать токен в заголовке authorization. Это необходимое условие. Если не передать серверу токен или передать неправильный — сервер ответит ошибкой. Делайте это в каждом запросе.
// Идентификатор группы должен быть в URL сразу после v1. Всегда обращайтесь к своей группе. Если обратиться к чужой, сервер вернёт ошибку.
// 3. Загрузка информации о пользователе с сервера
// Информация о пользователе должна подгружаться с сервера. Чтобы осуществить это, сделайте GET-запрос на URL (cohortId замените на идентификатор вашей группы):
// GET https://nomoreparties.co/v1/cohortId/users/me 
// При запросе не забудьте передать токен. Если запрос прошёл успешно, в ответе вы получите объект пользователя:
// {
//   "name": "Jacques Cousteau",
//   "about": "Sailor, researcher",
//   "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg",
//   "_id": "e20537ed11237f86bbb20ccb",
//   "cohort": "cohort0"
// } 
// Используйте свойства name, about и avatar в соответствующих элементах шапки страницы. Свойство _id — идентификатор пользователя, в данном случае вашего.
// 4. Загрузка карточек с сервера
// Начальные карточки должны подгружаться с сервера. Для этого сделайте GET-запрос:
// GET https://nomoreparties.co/v1/cohortId/cards 
// В ответ придёт JSON с массивом карточек, которые загрузили студенты вашей группы:
// [
//   {
//     "likes": [],
//     "_id": "5d1f0611d321eb4bdcd707dd",
//     "name": "Байкал",
//     "link": "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg",
//     "owner": {
//       "name": "Jacques Cousteau",
//       "about": "Sailor, researcher",
//       "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg",
//       "_id": "ef5f7423f7f5e22bef4ad607",
//       "cohort": "local"
//     },
//     "createdAt": "2019-07-05T08:10:57.741Z"
//   },
//   {
//     "likes": [],
//     "_id": "5d1f064ed321eb4bdcd707de",
//     "name": "Архыз",
//     "link": "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg",
//     "owner": {
//       "name": "Jacques Cousteau",
//       "about": "Sailor, researcher",
//       "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg",
//       "_id": "ef5f7423f7f5e22bef4ad607",
//       "cohort": "local"
//     },
//     "createdAt": "2019-07-05T08:11:58.324Z"
//   }
// ] 
// Используйте этот массив при отображении предзагруженных карточек, а от предыдущего способа отображения первоначальных карточек избавьтесь.
// У каждой карточки есть свойства name и link — это заголовок и ссылка на картинку — они понадобятся при отображении каждой отдельной карточки.
// Как видите, у карточки также есть идентификатор — свойство _id. Сейчас он вам не нужен, но скоро понадобится.
// 5. Редактирование профиля
// Отредактированные данные профиля должны сохраняться на сервере. Для этого отправьте запрос методом PATCH:
// PATCH https://nomoreparties.co/v1/cohortId/users/me 
// В заголовках запроса, кроме токена, необходимо отправить Content-Type, а в теле — JSON с двумя свойствами — name и about. Значениями этих свойств должны быть обновлённые данные пользователя. Вот пример такого запроса:
// fetch('https://nomoreparties.co/v1/cohortId/users/me', {
//   method: 'PATCH',
//   headers: {
//     authorization: 'c56e30dc-2883-4270-a59e-b2f7bae969c6',
//     'Content-Type': 'application/json'
//   },
//   body: JSON.stringify({
//     name: 'Marie Skłodowska Curie',
//     about: 'Physicist and Chemist'
//   })
// }); 
// Если обновление прошло успешно, в теле ответа от сервера вы получите обновлённые данные пользователя:
// {
//   "name": "Marie Skłodowska Curie",
//   "about": "Physicist and Chemist",
//   "avatar": "https://pictures.s3.yandex.net/frontend-developer/common/ava.jpg",
//   "_id": "e20537ed11237f86bbb20ccb",
//   "cohort": "cohort0",
// } 
// Метод PATCH обычно используют для обновления сущностей, уже существующих на сервере. Обновление информации о пользователе — именно такой случай: пользователь уже есть, нужно просто обновить его данные.
// 6. Добавление новой карточки
// Чтобы добавить на сервер новую карточку, отправьте POST-запрос:
// POST https://nomoreparties.co/v1/cohortId/cards 
// В заголовках запроса, кроме токена, необходимо отправить Content-Type, а в теле — JSON с двумя свойствами — name и link. В name должно быть название создаваемой карточки, а в link — ссылка на картинку. Если запрос прошёл успешно, сервер вернёт ответ с объектом новой карточки:
//   {
//     "likes": [],
//     "_id": "5d1f0611d321eb4bdcd707dd",
//     "name": "Байкал",
//     "link": "https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg",
//     "owner": {
//       "name": "Jacques Cousteau",
//       "about": "Sailor, researcher",
//       "avatar": "https://pictures.s3.yandex.net/frontend-developer/ava.jpg",
//       "_id": "ef5f7423f7f5e22bef4ad607",
//       "cohort": "local"
//     },
//     "createdAt": "2019-07-05T08:10:57.741Z"
//   }, 
// 7. Отображение количества лайков карточки
// У каждой карточки есть свойство likes — оно содержит массив пользователей, лайкнувших карточку:
// {
//   "likes": [],
//   ...другие данные карточки
// } 
// Сделайте так, чтобы на каждой карточке было написано, сколько у неё лайков:
// image
// Это выглядит так
// Для этого придётся сверстать дополнительный элемент. Его дизайн есть в Figma.
// 8. Удаление карточки
// Прежде чем браться за работу с API, исправьте элемент карточки. Сделайте так, чтобы иконка удаления была только на созданных вами карточках, так как удалять чужие карточки нельзя.
// image
// Если карточка создана не вами, на ней нет иконки корзины
// После этого реализуйте функциональность удаления карточки. Карточка должна удаляться, если в попапе удаления карточки пользователь нажал «Да».
// Чтобы удалить карточку, отправьте DELETE-запрос:
// DELETE https://nomoreparties.co/v1/cohortId/cards/cardId 
// Вместо cardId в URL нужно подставить параметр _id карточки, которую нужно удалить. _id каждой карточки есть в её JSON:
// {
//   "likes": [],
//   "_id": "5d1f0611d321eb4bdcd707dd", — вот он
//   ...другие данные карточки
// } 
// В результате запрос на удаление этой карточки должен выглядеть так:
// DELETE https://nomoreparties.co/v1/cohortId/cards/5d1f0611d321eb4bdcd707dd 
// 9. Постановка и снятие лайка
// Чтобы лайкнуть карточку, отправьте PUT-запрос:
// PUT https://nomoreparties.co/v1/cohortId/cards/likes/cardId 
// Чтобы убрать лайк, нужно отправить DELETE-запрос с тем же URL:
// DELETE https://nomoreparties.co/v1/cohortId/cards/likes/cardId 
// Вместо cardId в URL нужно подставить свойство _id соответствующей карточки.
// В ответе придёт обновлённый JSON с карточкой. Массив лайков в нём будет уже обновлён.
// При постановке и снятии лайка сердечко должно менять цвет, а счётчик лайков увеличиваться или уменьшаться.
// Чтобы изменить количество лайков, нужно отправить на сервер запрос с соответствующим методом. Рекомендуем брать количество лайков из ответа сервера, а не из вёрстки. Иначе могут возникнуть ошибки, когда два пользователя одновременно лайкнут одну карточку.
// 10. Обновление аватара пользователя
// Чтобы сменить аватар, отправьте такой PATCH-запрос:
// PATCH https://nomoreparties.co/v1/cohortId/users/me/avatar 
// В теле запроса передайте JSON с единственным свойством — avatar. Это свойство должно хранить ссылку на новый аватар. Если отправить не ссылку, сервер вернёт ошибку.
// При наведении указателя мыши на аватар, на нём должна появляться иконка редактирования:
// image
// А при клике — открываться форма. Эту форму нужно сделать. В ней должно быть одно поле — ссылка на новый аватар:
// image
// Иконка редактирования аватара и форма загрузки есть в Figma.
// 11. Улучшенный UX всех форм
// Поработайте над UX. При редактировании профиля уведомите пользователя о процессе загрузки, поменяв текст кнопки на: «Сохранение...», пока данные загружаются:
// image
// Сделайте то же самое для формы добавления новой карточки и обновления аватара.
// 12. Требования к коду
// Для работы с API создайте файл api.js. Все запросы присвойте переменным и экспортируйте их. В других модулях вы сможете импортировать эти функции и вызывать их. Вот небольшой пример того, как можно обустроить код в файле api.js:
// const config = {
//   baseUrl: 'https://nomoreparties.co/v1/cohort-42',
//   headers: {
//     authorization: 'c56e30dc-2883-4270-a59e-b2f7bae969c6',
//     'Content-Type': 'application/json'
//   }
// }

// export const getInitialCards = () => {
//     return fetch('', {})
//     // ...
// } 
// 13. Общие комментарии
// 1. Не забывайте проверять, всё ли в порядке с ответом. Для этого можно использовать res.ok или res.status:
// const config = {
//   baseUrl: 'https://nomoreparties.co/v1/cohort-42',
//   headers: {
//     authorization: 'c56e30dc-2883-4270-a59e-b2f7bae969c6',
//     'Content-Type': 'application/json'
//   }
// }

// export const getInitialCards = () => {
//   return fetch(`${config.baseUrl}/cards`, {
//     config.headers
//   })
//     .then(res => {
//       if (res.ok) {
//         return res.json();
//       }
//     });
// } 
// 2. Учитывайте случай, когда сервер вернул ошибку:
// const config = {
//   baseUrl: 'https://nomoreparties.co/v1/cohort-42',
//   headers: {
//     authorization: 'c56e30dc-2883-4270-a59e-b2f7bae969c6',
//     'Content-Type': 'application/json'
//   }
// }

// export const getInitialCards = () => {
//   return fetch(`${config.baseUrl}/cards`, {
//     config.headers
//   })
//     .then(res => {
//       if (res.ok) {
//         return res.json();
//       }

//       // если ошибка, отклоняем промис
//       return Promise.reject(`Ошибка: ${res.status}`);
//     });
// } 
// 3. Обрабатывайте ошибки, которые попадают в catch. Если запрос не ушёл на сервер или тот не ответил, сработает блок catch. Обрабатывайте ошибку внутри этого блока. Если нет времени писать сложную логику, просто выведите ошибку в консоль:
// import { getInitialCards } from './api.js'

// getInitialCards()
//   .then((result) => {
//     // обрабатываем результат
//   })
//   .catch((err) => {
//     console.log(err); // выводим ошибку в консоль
//   }); 
// 4. Пользуйтесь вкладкой Network для просмотра запросов. При отправке запросов держите вкладку Network открытой. Отфильтруйте в ней XHR запросы. Это позволит оперативно следить, что приходит в ответе от сервера.
// 14. Дополнительно. Попап удаления карточки
// Это дополнительное задание — выполнять его не обязательно. Но если решитесь, его придётся доделать до конца и без ошибок. В случае ошибки ревьюер вернёт на доработку весь проект. Если вы не уверены в том, как реализуется эта функциональность, но хотите попробовать свои силы, мы рекомендует выполнить это задание в отдельной ветке Git. Таким образом этот код не попадёт на проверку. Когда будете уверены, что всё работает корректно, — смёржите отдельную ветку с main. Но сначала разберём само задание.
// Удаление чего-то, как правило, безвозвратно. Поэтому перед этим действием стоит спросить пользователя, уверен ли он, что хочет удалить карточку. Для этого сделайте новый попап. Он должен открываться по клику на иконку удаления:
// image
// Попап удаления карточки
// Дизайн попапа есть в Figma.
// Если проблемы с Figma
// У Figma есть ограничение на количество одновременных посетителей. Может оказаться, что в макет зашло слишком много студентов, и Figma вас не пустит. Чтобы этого избежать, скачайте копию макета к себе. Легче всего это сделать из приложения Figma для компьютера. После авторизации вы сможете скачать копию проекта с расширением .fig:
// image
// Сохранение проекта на компьютер
// Импортировать файл обратно в Figma можно с помощью иконки ”import“ в правом верхнем углу:
// image
// Импорт файла в «Фигму»
// Файл загрузится на вашу личную доску. Комментарии пропадут, но всё необходимое для работы над макетом всегда будет под рукой.
